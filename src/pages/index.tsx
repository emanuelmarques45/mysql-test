import { useAuth } from "@/contexts/AuthContext"
import { InferGetServerSidePropsType } from "next"
import Head from "next/head"

import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import c from "@/lib/utils/crypt"

const validationSchema = z.object({
  email: z.string().min(1, { message: "Email is required" }).email({
    message: "Must be a valid email",
  }),
  password: z
    .string()
    .min(6, { message: "Password must be atleast 6 characters" }),
})

type ValidationSchema = z.infer<typeof validationSchema>

export default function Home({
  data,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const auth = useAuth()

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ValidationSchema>({ resolver: zodResolver(validationSchema) })

  async function handleSubmitForm({ email, password }: ValidationSchema) {
    const encryptedPassword = c.encryptString(password)
    const res = await auth.signIn({ email, encryptedPassword })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form
        action="#"
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          gap: "1rem",
          height: "90svh",
        }}
        onSubmit={handleSubmit(handleSubmitForm)}
      >
        <input
          type="email"
          placeholder="Email"
          {...register("email")}
          value={"zeruela@gmail.com"}
        />
        <input
          type="password"
          placeholder="Password"
          {...register("password")}
          value={"123456"}
        />
        <button>Log in</button>
      </form>
      {errors.password && (
        <p style={{ color: "black" }}> {errors.password.message} </p>
      )}
    </>
  )
}

export async function getServerSideProps() {
  const data = await fetch("http://localhost:3000/api/users").then((data) =>
    data.json()
  )

  return { props: { data } }
}
